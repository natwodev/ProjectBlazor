@page "/products"
@using BlazorApp2.DTOs
@using BlazorApp2.Services
@inject NavigationManager NavigationManager
@inject ProductService ProductService
@inject AuthService AuthService
@inject CartItemService CartItemService
@inject IJSRuntime JS

<style>
    .product-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-radius: 12px;
        overflow: hidden;
        border: none;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
    }

    .card-img-top {
        transition: transform 0.3s ease;
    }

    .product-card:hover .card-img-top {
        transform: scale(1.05);
    }

    .card-title {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.25rem;
        font-size: 0.9rem;
    }

    .price-tag {
        color: #e74c3c;
        font-weight: 600;
        font-size: 1rem;
        margin-bottom: 0.25rem;
    }

    .card-text {
        font-size: 0.8rem;
        margin-bottom: 0.25rem;
    }

    .category-badge {
        background-color: #f8f9fa;
        color: #6c757d;
        padding: 0.15rem 0.5rem;
        border-radius: 20px;
        font-size: 0.75rem;
    }

    .card-body {
        padding: 0.5rem;
    }

    .card-footer {
        padding: 0.5rem;
    }

    .action-buttons .btn {
        padding: 0.15rem 0.3rem;
        font-size: 0.7rem;
        min-width: 0;
    }

    .action-buttons .btn:hover {
        transform: translateY(-2px);
    }

    .btn-primary {
        background-color: #3498db;
        border-color: #3498db;
    }

    .btn-warning {
        background-color: #f1c40f;
        border-color: #f1c40f;
        color: #2c3e50;
    }

    .btn-danger {
        background-color: #e74c3c;
        border-color: #e74c3c;
    }

    .page-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .create-btn {
        padding: 0.6rem 1.5rem;
        font-weight: 500;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .add-to-cart {
        padding: 0.15rem 0.3rem;
        font-size: 0.7rem;
        border-radius: 4px;
        opacity: 0.9;
    }
    .add-to-cart i {
        font-size: 0.7rem;
    }

    .action-buttons .btn i {
        font-size: 0.7rem;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="..." crossorigin="anonymous" />

<div class="container-fluid py-4">
    <div class="page-header d-flex justify-content-between align-items-center">
        <h3 class="m-0">Danh sách sản phẩm</h3>
        @if (_isAdmin)
        {
            <button class="btn btn-primary create-btn" @onclick="NavigateToCreate">
                <i class="fas fa-plus me-2"></i>Tạo mới
            </button>
        }
    </div>

    @if (_products == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Đang tải dữ liệu...</p>
        </div>
    }
    else if (_products.Count == 0)
    {
        <div class="text-center py-5">
            <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
            <p class="text-muted">Không tìm thấy sản phẩm nào.</p>
        </div>
    }
    else
    {
        <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-6 g-3">
            @foreach (var product in _products)
            {
                <div class="col">
                    <div class="product-card card h-100 position-relative">
                        <button class="btn btn-success btn-sm add-to-cart position-absolute top-0 end-0 m-1" 
                                @onclick="() => AddToCart(product.Id)"
                                style="z-index: 1;">
                            <i class="fas fa-cart-plus"></i>
                        </button> 



                        <div class="position-relative overflow-hidden">
                            <img src="data:image/png;base64,@product.Image" class="card-img-top" alt="@product.Name" style="height: 120px; object-fit: cover;" />
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            <h6 class="price-tag">@product.Price.ToString("C")</h6>
                            <p class="card-text text-muted small">@product.Description</p>
                            <span class="category-badge">@product.CategoryName</span>
                        </div>
                        <div class="card-footer bg-white border-top-0 action-buttons d-flex justify-content-between gap-1">
                            <button class="btn btn-primary flex-grow-1" @onclick="() => NavigateToView(product.Id)">
                                <i class="fas fa-eye"></i>
                            </button>
                            @if (_isAdmin)
                            {
                                <button class="btn btn-warning flex-grow-1" @onclick="() => NavigateToEdit(product.Id)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-danger flex-grow-1" @onclick="() => DeleteProduct(product.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<ProductDto>? _products;
    private bool _isAdmin;

    private async Task AddToCart(int productId)
    {
        try
        {
            var createCartItemDto = new CreateCartItemDto
            {
                ProductId = productId,
                Quantity = 1
            };

            var result = await CartItemService.AddToCartAsync(createCartItemDto);
            if (result != null)
            {
                await JS.InvokeVoidAsync("alert", "Đã thêm sản phẩm vào giỏ hàng!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Không thể thêm sản phẩm vào giỏ hàng. Vui lòng thử lại!");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Có lỗi xảy ra: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _isAdmin = await AuthService.IsAdmin();
        _products = await ProductService.GetAllProductsAsync();
    }
    
    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/products/update/{id}");
    }
    
    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/products/create");
    }
    
    private void NavigateToView(int id)
    {
        NavigationManager.NavigateTo($"/products/view/{id}");
    }
    
    private async Task LoadProductAsync()
    {
        _products = await ProductService.GetAllProductsAsync();
    }
    
    private async Task DeleteProduct(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn xoá sản phẩm {id}?");
        if (confirm)
        {
            var response = await ProductService.DeleteProductAsync(id);
            if (response.IsSuccessStatusCode)
            {
                await LoadProductAsync(); 
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Không thể xoá Sản phẩm.");
            }
        }
    }
}