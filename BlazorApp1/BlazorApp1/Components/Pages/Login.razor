@page "/login"
@using BlazorApp1.DTOs
@using BlazorApp1.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="login-box">
        <h3>Đăng nhập</h3>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="login-form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="username">Tên đăng nhập:</label>
                <InputText id="username" @bind-Value="loginModel.UserName" class="form-control" />
                <ValidationMessage For="@(() => loginModel.UserName)" />
            </div>

            <div class="form-group">
                <label for="password">Mật khẩu:</label>
                <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Đang đăng nhập...</span>
                }
                else
                {
                    <span>Đăng nhập</span>
                }
            </button>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f5f5f5;
    }

    .login-box {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 400px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .btn-primary {
        width: 100%;
        padding: 0.75rem;
        margin-top: 1rem;
    }

    .alert {
        padding: 0.75rem;
        margin-bottom: 1rem;
        border-radius: 4px;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }
</style>

@code {
    private LoginModelDTO loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var result = await AuthService.Login(loginModel);

            if (result.IsSuccess)
            {
                // Redirect to home page after successful login
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra khi đăng nhập. Vui lòng thử lại sau.";
        }
        finally
        {
            isLoading = false;
        }
    }
} 